Please answer the below Data Structure Questions:

1-why do we need data structure?
     Data structure provides efficiency, reusability and abstraction. It plays an important
     role in enhancing the performance of a program because the main function of the program
     is to store and retrieve the user's data as fast as possible

2-What are the various operations that can be performed on different Data Structures?
     * Insertion: Adding new element in the data structure
     * Deletion: It is removing data from data structure
     * Searching: It is finding location of a data in within a given data structure.
     * Sorting: It is arranging of data in some logical order.
     * Traversing: A data structure is accessing each data only once.
     * Merging: It is combining of two similar data structures.
     For more detail contact us

3-List out the areas in which data structures are applied extensively?
     * Compiler Design.
     * Operating System.
     * Database Management System
     * Statistical analysis package
     * Numerical Analysis.
     * Graphics.
     * Artificial Intelligence

4-what is an Array?
     An array is a non primitive variable  Data Structure containing a number of a same
     data type elements.
     Arrays are used to store multiple values in a single variable,instead of declaring
     separate variables for each value.

5-what is the difference between the Array and ArrayList?
     * Array is static in size that is fixed length data structure, One can not change the
      length after creating the Array object.
      ArrayList is dynamic in size . Each ArrayList object  has instance variable capacity
      which indicates the size of the ArrayList. As elements are added to an ArrayList its
      capacity grows automatically.
     * ArrayList can contain primitive and non primitive data type but array contain only
      non primitive data type
     *  Array can be multi dimensional , while ArrayList is always
     single dimensional.
     *  Array element's can be accessed  by using an index [],
     ArrayList has a set of methods to access its elements.

6-what is LinkedList?
    Linked List are linear data structures that uses nodes to store the data
    instead of blocks.

7-How is an Array list different from Linked List?
    Array list is using array and behind it there are arrays. Linked list is using nodes
    much easier to manipulate.

8-what is queue?
    Is a collection that uses FIFO to store and retrieve data.

9-what is stack?
    Is a collection that uses FILO to store and retrieve data under list interface

10-what is FIFO and LIFO?
    FIFO is First In First Out.
    LIFO is Last In First Out.
11-what is the order of complexity?
    . Order of complexity is a measure of how long an algorithm would take to complete given an input of size n.
    Assuming the input  of size N, we can say that the algorithm will finish at O(N), O(N^2), O(N^3), O(N*log(N)) etc.
    This means that it is a certain mathematical expression of the size of the input, and the algorithm finishes between
    two factors of it. Generally, the smaller the order of complexity of the program's underlying algorithm, the faster
    it will run and the better it will scale as the input gets larger. Thus, we should often seek more efficient
    algorithms in order to reduce the order of complexity.

12-what is the best case to search an element from an array?
    Sequential search (using map) is the best that we can do when trying to find a value in an unsorted array. But if the array is
    sorted in increasing order by value, then we can do much better. We use a process called binary search.

13-what is the worst case to search an element from an array?
    For an unsorted array, we have to search element by element, until the element is found or array is completely
    traversed. Element can be at 1st position, the last position or somewhere in between. The worst case arises when
    the element is at last position or not in the array, therefore we have to traverse the whole array giving  no.
    of repetitions over loop. Therefore the worst case time complexity is On.

14-what is tree in data structure?
    Tree is a nonlinear data structure, compared to arrays, linked lists, stacks and queues which are linear data structures.
       A tree can be empty with no nodes or a tree is a structure consisting of one node called the root and zero or one or more
       subtrees. A tree has following general properties:
       One node is distinguished as a root;
       Every node (exclude a root) is connected by a directed edge from exactly one other node; A direction is: parent -> children

15-what is graph in data structure?
     A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as vertices
        and the edges are lines or arcs that connect any two nodes in the graph. Graphs are used to solve many real-life problems.
        Graphs are used to represent networks. The networks may include paths in a city or telephone network or circuit network.
        Graphs are also used in social networks like linkedIn, Facebook. For example, in Facebook, each person is represented with
        a vertex(or node). Each node is a structure and contains information like person id, name, gender, locale etc.

16-what is the difference between the HashTable and HashMap?
     . HashTable is synchronized, HashMap is not. Therefore it makes HashMap efficient with non-threaded applications
        because un-synchronized objects perform better than synchronized objects. HashTable does not allow null keys or values,
        where HashMap does allow one null key and unlimited null values.

17-What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
    RDBMS : Arrays.
    Network data model : Graph.
    Hierarchical data model : Tree.

18-How HashMap works in java?
    HashMap implements MAP interface it works on the principle of Hashing. Objects are stored by calling put(key, value)
    method of HashMap and retrieved by calling get(key) method. When we call put method, the hashcode() method of the key
    object is called so that the hash function of the map can find a bucket location to store value object, which is actually
    an index of the internal array, known as the table.

19-What is ArrayIndexOutOfBoundsException in java? When it occurs?
   Is whenever you try to retrieve a data from an index that we donâ€™t have in the array.

20-What are the different ways of copying an array into another array?
   System array copy
   Array clone
   Loop.

21-What is difference between an array and a linked list?
   . A. - An array is a collection of elements defined in block with index only, A linked list is a collection of objects
       known as a nodes where node consists of two parts, i.e., data and address.
         - Array elements store in a contiguous memory location.Linked list elements can be stored anywhere in the memory or
         randomly stored.
         - Array works with a static memory. The Linked list works with dynamic memory.
         - Array elements are independent of each other.Linked list elements are dependent on each other.
         - Array takes more time while performing any operation like insertion, deletion, etc. Linked list takes less time while
         performing any operation like insertion, deletion, etc.

22-What is DFS and BFS?
    BFS(Breadth First Search) uses Queue data structure for finding the
    shortest path.
    DFS(Depth First Search) uses Stack data structure.

23-What is Recursion?
    Recursion is the technique of making a function call itself.
    This technique provides a way to break complicated problems down into
    simple problems which are easier to solve.
    Recursion may be a bit difficult to understand. The best way to figure out
    how it works is to experiment with it.

24-What are linear and non linear data Structures?
   * In a linear data structure, data elements are arranged in a linear order
   where each and every element is attached to its previous and next adjacent.
   * In a non-linear data structure, data elements are
   attached in hierarchically manner.
25-What is Big-(O)-notation?
   Big O notation is used in Computer Science to describe the performance
    or complexity of an algorithm. Big O specifically describes the
    worst-case scenario, and can be used to describe the execution time
    required (how long an algorithm will take to run) or the space used
    by an algorithm

26-Outlined different kind of sorting algorithm with time complexity?
    1- Bubble sort: It is a comparison algorithm. It works by repeatedly stepping through the list to be sorted, comparing each
          pair of adjacent items and swapping them if they are in the wrong order. The pass through the list is repeated until no
          swaps are needed, which indicates that the list is sorted.
          Worst case performance: O(n2)
          Best case performance: O(n)
          Average case performance: O(n2)
          Worst case space complexity: O(n) total, O(1) auxiliary
          Bubble sort is not a practical sorting algorithm when n is large.

          2.Selection sort: It is an in-place comparison sort.Selection sort is noted for its simplicity, and also has performance
          advantages over more complicated algorithms in certain situations.
          Worst case performance: O(n2)
          Best case performance: O(n2)
          Average case performance: O(n2)
          Worst case space complexity: O(n) total, O(1) auxiliary

          3.Insertion sort: It is a comparison sort in which the sorted array (or list) is built one entry at a time. It is much
          less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.
          Worst case performance: O(n2)
          Best case performance: O(n)
          Average case performance: O(n2)
          Worst case space complexity: O(n) total, O(1) auxiliary

          4. Merge sort: It is an O(n log n) comparison-based sorting algorithm.
          Worst case performance: O(n log n)
          Best case performance: O(n log n) typical
          Average case performance: O(n log n)
          Worst case space complexity: O(n) total, O(n) auxiliary

          5.Quick sort: It is similar to merge sort in many ways. It divides the elements to be sorted into two groups, sorts the
          two groups by recursive calls, and combines the two sorted groups into a single array of sorted values.
          The choice of a good pivot element is critical to the efficiency of the quicksort algorithm.
          If we can ensure that the pivot element is near the median of the array values, then quicksort is very efficient.
          Worst case performance: O(n2)
          Best case performance: O(n log n)
          Average case performance: O(n log n)

27-Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

      ++-----------------++----------++------------++------------++-----------++
      ||Datastructures   ||Accessing || Insertion  || Searching  || Removing  ||
      ___________________||__________||____________||____________||___________++
      ||Array            || 0(1)     || 0(n)       || 0(n)       || 0(n)      ||
      ||Stack            || 0(n)     || 0(1)       || 0(n)       || 0(1)      ||
      ||Queue            || 0(n)     || 0(1        || 0(n)       || 0(1)      ||
      ||Singly-Linkedlist|| 0(n)     || 0(1)       || 0(n)       || 0(1)      ||
      ||doubly-Linkedlist|| 0(n)     || 0(1)       || 0(n)       || 0(1)      ||
      ||HashTable        || N/A      || 0(1)       || 0(1)       || 0(1)      ||
      ||BinaryTree       || 0(log(n))|| 0(log(n))  || 0(log(n))  || 0(log(n)) ||
      ++-----------------++----------++------------++------------++-----------++

